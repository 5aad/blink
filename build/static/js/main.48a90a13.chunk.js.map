{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","setTimeout","setState","showWord","clickedReady","selectedNote","state","words","Math","floor","random","length","selectedEnd","per","inputHidden","hideReady","hideReadys","perfect","inputWord","timerOn","timerTime","timerStart","Date","now","timer","setInterval","handleInputWord","e","target","value","clearInterval","againHidden","handleAgain","inc","countsec","count","handleTime","hours","minutes","seconds","console","log","resetState","spans","contentEditable","React","createRef","color","tryAgain","bind","this","second","slice","minute","inputStyle","inputText","split","i","includes","indexOf","className","hidden","style","cursor","onClick","position","fontSize","autoFocus","type","onChange","size","duration","delay","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48a90a13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {MDBAnimation,MDBInput} from \"mdbreact\"\r\n \r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.contentEditable = React.createRef();\r\n    this.state = {\r\n      words:[\r\n        'hello, monkey eats banana',\r\n        'monkey ,monkey',\r\n        'world, monkey',\r\n        'set on, fire',\r\n        'write your name'\r\n        ],\r\n    per:['perfect', 'amazing', 'flawless'],\r\n      selectedNote: \"\",\r\n      \r\n      clickedReady: false,\r\n      spans:\"\",\r\n      inputWord:'',\r\n      hideReady:false,\r\n      hideReadys:true,\r\n      count:0,\r\n      countsec:0,\r\n      perfect:false,\r\n      inputHidden:true,\r\n      againHidden:true,\r\n      showWord:false,\r\n      timerOn: false,\r\n      timerStart: 0,\r\n      timerTime: 0,\r\n      color:\"white\",\r\n      tryAgain:false\r\n    }\r\n    this.handleInputWord = this.handleInputWord.bind(this);\r\n  \r\n  }\r\n\r\n  handleClick = () => {\r\n   \r\n    setTimeout(() => {\r\n      this.setState({\r\n          showWord:true\r\n      })\r\n    }, 300)\r\n    this.setState({\r\n        clickedReady: true, \r\n        selectedNote: this.state.words[Math.floor(Math.random() * \r\n          this.state.words.length)],\r\n        selectedEnd: this.state.per[Math.floor(Math.random() * \r\n          this.state.per.length)],\r\n        inputHidden:false,\r\n        hideReady:true,\r\n        hideReadys:true,\r\n        perfect:false,\r\n        inputWord:'',\r\n        showWord:false,\r\n        timerOn: true,\r\n        timerTime: this.state.timerTime,\r\n        timerStart: Date.now() - this.state.timerTime\r\n        \r\n    })\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart\r\n      });\r\n    }, 10);\r\n  }\r\n\r\n handleInputWord=(e)=>{ \r\n   \r\n    if(e.target.value===this.state.selectedNote){\r\n      this.setState({\r\n          perfect:true,\r\n          inputHidden:true,\r\n          inputWord:e.target.value,\r\n          timerOn: false\r\n          \r\n      })\r\n      this.setState({inputWord:e.target.value})\r\n      clearInterval(this.timer);\r\n   }else{\r\n     this.setState({\r\n          againHidden:false,\r\n          inputWord:e.target.value\r\n     })\r\n   }\r\n   \r\n }\r\n//  handleSubmit=()=>{\r\n//      console.log('pressed')\r\n//      if(this.state.inputWord===this.state.selectedNote){\r\n//         this.setState({\r\n//             perfect:true,\r\n//             inputHidden:true,\r\n            \r\n//         })\r\n//      }else{\r\n//        this.setState({\r\n//          againHidden:false\r\n//        })\r\n//      }\r\n//  }\r\n handleAgain=()=>{\r\n   var  inc = 200 + this.state.countsec\r\n    setTimeout(() => {\r\n      this.setState({\r\n          showWord:true,\r\n          inputHidden:false\r\n      })\r\n    }, inc)\r\n    this.setState({\r\n        count:this.state.count+1,\r\n        countsec:this.state.countsec+200,\r\n        showWord:false,\r\n        inputHidden:true\r\n    })\r\n }\r\n handleTime=(hours,minutes,seconds)=>{\r\n    console.log(hours,minutes,seconds)\r\n }\r\n\r\nresetState=()=>{\r\n  this.setState({\r\n    selectedNote: \"\",\r\n    clickedReady: false,\r\n    inputWord:'',\r\n    hideReadys:false,\r\n    count:0,\r\n    perfect:false,\r\n    inputHidden:true,\r\n    againHidden:true,\r\n    showWord:false,\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerTime: 0,\r\n    countsec:0,\r\n    spans:[]\r\n })\r\n}\r\n  render(){\r\n\r\n    const { timerTime } = this.state;\r\n    // let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\r\n    let second = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\r\n    let minute = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\r\n    // let hour = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\r\n\r\n    let inputStyle = {\r\n      color: 'white'\r\n    };\r\n    let inputText=this.state.inputWord.split(\" \")\r\n    \r\n    for(var i =0; i < inputText.length; i++){\r\n      if(this.state.selectedNote.includes(inputText[i])===true){ \r\n           \r\n        if(this.state.inputWord.indexOf(inputText[i]) === this.state.selectedNote.indexOf(inputText[i])){\r\n\r\n        inputStyle = {\r\n          color: 'blue'\r\n        };\r\n        }else{\r\n\r\n        inputStyle = {\r\n          color: 'yellow'\r\n        };\r\n        }\r\n    }else{\r\n\r\n      inputStyle = {\r\n        color: 'white'\r\n      };\r\n    }\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n    <div className=\"App-header\">\r\n\r\n        <div className=\"os-phrases\">\r\n              <h2 hidden={this.state.hideReady}><span className=\"blinking\">don't</span> blink</h2>\r\n              <h2 hidden={this.state.hideReady}>you have one job</h2>\r\n              <h2 hidden={this.state.hideReady}>write down what you see</h2>\r\n              <h2 style={{cursor:\"pointer\"}} onClick={this.handleClick} hidden={this.state.hideReady}>Ready?</h2>\r\n        </div>\r\n        <h2 style={{cursor:\"pointer\"}} onClick={this.handleClick} hidden={this.state.hideReadys}>Ready?</h2>\r\n        <h1 className=\"pb-2\" style={{position:\"absolute\" , fontSize: \"3.35rem\"}} hidden={this.state.showWord}>{this.state.selectedNote}</h1>\r\n        {\r\n          this.state.inputHidden?\r\n          (\r\n            <></>\r\n          ):\r\n          (\r\n            <div >\r\n            <h2 className=\"count\"> {this.state.count} <small>{this.state.countsec/1000}s</small></h2>\r\n            <MDBInput autoFocus style={inputStyle}  value={this.state.inputWord} type=\"text\" onChange={(e)=>this.handleInputWord(e)} size=\"lg\" />\r\n            <h2 className=\"text-center pt-2\" style={{cursor:\"pointer\"}} onClick={this.handleAgain} hidden={this.state.againHidden}>Again?</h2>\r\n            </div>\r\n          )\r\n        }\r\n       \r\n        {\r\n            this.state.perfect?\r\n            (\r\n              \r\n                <div className=\"text-center\">\r\n                  <MDBInput type=\"text\" style={inputStyle} value={this.state.inputWord} onChange={(e)=>this.handleInputWord(e)} size=\"lg\" />\r\n                  <h2>{this.state.selectedEnd}</h2>\r\n                  <MDBAnimation type=\"fadeIn\" duration=\"1s\" delay=\"2s\">\r\n                  <h2 className=\"p-2\">{this.state.count} flashes, {minute}:{second} Seconds</h2>\r\n                  <h2 style={{cursor:\"pointer\"}} onClick={this.resetState}>I want more</h2>\r\n                  </MDBAnimation>\r\n                </div>\r\n            ):\r\n            (\r\n                <></>\r\n            )\r\n        }\r\n      </div>\r\n      </>\r\n  );\r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}